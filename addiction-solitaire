#!/usr/bin/env python3

# Addiction Solitaire
#
# Copyright (C) 2019, Tarun Prabhu <tarun.prabhu@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import argparse
import faulthandler
import signal
import sys
import threading
import traceback
from enum import Enum, unique, auto

from addiction.game import Game
from addiction.gtk.ui import GameGtk
from addiction.gtk.dialog import SettingsGtk
# from addiction.qt.ui import GameQt
# from addiction.qt.dialog import SettingsQt
from addiction.text.ui import GameText


@unique
class Mode(Enum):
    Gtk = auto()
    Qt = auto()
    Text = auto()

# int, stack.frame, Game =>
def signal_trap_sigint(signal, frame, game):
    print('Threads:', file = sys.stderr)
    for t in threading.enumerate():
        print('  {}: {} [{}]'.format(t.name, t.ident, hex(t.ident)),
              file = sys.stderr)
    print(file = sys.stderr)
    faulthandler.dump_traceback(file = sys.stderr)
    game.do_quit()

# None => int
def main():
    parser = argparse.ArgumentParser('Addiction solitaire game')
    parser.add_argument('-d', '--debug', default = False, action = 'store_true',
                        help = 'Print debug messages')
    parser.set_defaults(mode = Mode.Gtk)

    ui = parser.add_subparsers()

    gtk = ui.add_parser('gtk', help = 'gtk help')
    gtk.set_defaults(mode = Mode.Gtk)

    qt = ui.add_parser('qt', help = 'qt help')
    qt.set_defaults(mode = Mode.Qt)

    text = ui.add_parser('text', help = 'text help')
    text.add_argument('-s', '--shuffles', default = 3,
                      dest = 'shuffles', action='store_const', const = -1,
                      help = ('Maximum number of shuffles. '
                              'If no number is provided, unlimited shuffles'))
    text.add_argument('-m', '--no-movable', default = True,
                      dest = 'highlight_movable', action='store_false',
                      help = ('Do not highlight movable cards'))
    text.add_argument('-c', '--no-correct', default = True,
                      dest = 'highlight_correct', action='store_false',
                      help = ('Do not highlight correct cards'))
    text.set_defaults(mode = Mode.Text)

    args = parser.parse_args()

    game = None
    if args.mode == Mode.Gtk:
        game = Game(GameGtk, args.debug)
    elif args.mode == Mode.Qt:
        game = Game(GameQt, args.debug)
    elif args.mode == Mode.Text:
        game = Game(GameText,
                    False,
                    shuffles = args.shuffles,
                    highlight_movable = args.highlight_movable,
                    highlight_correct = args.highlight_correct)

    if args.debug:
        signal.signal(signal.SIGINT,
                      lambda sig, frm: signal_trap_sigint(sig, frm, game))

    game.main()

    return 0

if __name__ == '__main__':
    exit(main())
